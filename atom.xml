<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://gchrweb.github.io</id>
    <title>GCHR WEB</title>
    <updated>2025-01-04T10:05:37.379Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://gchrweb.github.io"/>
    <link rel="self" href="https://gchrweb.github.io/atom.xml"/>
    <subtitle>时间飞快流逝，记忆永远存在</subtitle>
    <logo>https://gchrweb.github.io/images/avatar.png</logo>
    <icon>https://gchrweb.github.io/favicon.ico</icon>
    <rights>All rights reserved 2025, GCHR WEB</rights>
    <entry>
        <title type="html"><![CDATA[站点迁移公告]]></title>
        <id>https://gchrweb.github.io/post/zhan-dian-qian-yi-gong-gao/</id>
        <link href="https://gchrweb.github.io/post/zhan-dian-qian-yi-gong-gao/">
        </link>
        <updated>2025-01-04T09:58:43.000Z</updated>
        <content type="html"><![CDATA[<p>2024年年底，本站迁移至<a href="https://lgcr837.github.io">lgcr837.github.io</a>，原站点彻底停止维护。<br>
因为特殊原因，我们失去了<a href="https://geng-cr.github.io">geng-cr.github.io</a>的所有控制权力，也失去了<a href="https://gchrweb.github.io">gchrweb.github.io</a>的大部分控制权力。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPT 可用地址]]></title>
        <id>https://gchrweb.github.io/post/chatgpt-ke-yong-di-zhi/</id>
        <link href="https://gchrweb.github.io/post/chatgpt-ke-yong-di-zhi/">
        </link>
        <updated>2024-03-22T18:28:35.000Z</updated>
        <content type="html"><![CDATA[<p>ChatGPT是一个人工智能。官网中国无法进去，这里提供几个亲测可用的Copy网站。</p>
<p><a href="https://chat.openai.com">OpenAI ChatGPT 官网</a> 4.0付费，需要OpenAI账号，需要魔法上网(中国大陆无法使用)<br>
<a href="https://chat18.aichatos.xyz">chat18.aichatos.xyz</a> 仅3.0，比较稳定<br>
<a href="https://chat.xn--9kq011n.com/">速云AI</a> 仅3.5可用，不稳定<br>
<a href="https://chatgptdemo.info/chat/">ChatGPT Online Free</a> 未知版本，十分稳定，经测试可能为4.0版本</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github 的第一次使用须知]]></title>
        <id>https://gchrweb.github.io/post/github-de-di-yi-ci-shi-yong-xu-zhi/</id>
        <link href="https://gchrweb.github.io/post/github-de-di-yi-ci-shi-yong-xu-zhi/">
        </link>
        <updated>2024-03-22T11:59:59.000Z</updated>
        <content type="html"><![CDATA[<p>Github 是一个开源代码托管网站，是外国网站，你可以在上面上传你要公开的代码。<br>
Github 的替代品有：</p>
<ul>
<li>Gitee码云 (国内,需要18周岁以上实名认证)</li>
<li>Gitlab (国外)<br>
Github 访问较慢，可以使用本地hosts代理或使用WattToolkit加速。</li>
</ul>
<h1 id="注册-github-账号">注册 Github 账号</h1>
<p>如果已经注册了，就跳过这一步骤。<br>
准备食材：</p>
<ul>
<li>一个人</li>
<li>一只手</li>
<li>一台电脑</li>
<li>一个浏览器(360浏览器和搜狗浏览器可能不支持，建议使用Chrome或Edge浏览器)</li>
<li>一个电子邮箱(QQ邮箱可能收不到验证码，建议使用<a href="outlook.com">Outlook</a>)<br>
首先打开Github官网，<a href="github.com">github.com</a>，等待加载完成。<br>
点击右上角带方框的<code>Sign up</code>(注册)<br>
<img src="https://img.duan.ee/z/2024/03/16/65f51b51bc37d.png" alt="" loading="lazy"><br>
然后输入你的邮箱。<br>
<img src="https://img.duan.ee/z/2024/03/16/65f51c5bdc77d.png" alt="" loading="lazy"><br>
输入一个可以的混合密码(简单密码不让注册)。<br>
<img src="https://img.duan.ee/z/2024/03/16/65f51d5223db5.png" alt="" loading="lazy"><br>
输入你的用户名(不符合规则的无法注册)。<br>
<img src="https://img.duan.ee/z/2024/03/16/65f51e2be79aa.png" alt="" loading="lazy"><br>
然后会提示是否要给你的邮箱投放Github的广告，直接点<code>Continue</code>继续。<br>
<img src="https://img.duan.ee/z/2024/03/16/65f51f26e1ae4.png" alt="" loading="lazy"><br>
验证环节。<br>
<img src="https://img.duan.ee/z/2024/03/16/65f51ff3574a0.png" alt="" loading="lazy"><br>
到你的邮箱里去找数字验证码输入进去。<br>
<img src="https://img.duan.ee/z/2024/03/16/65f5205cdf011.png" alt="" loading="lazy"><br>
点击<code>Just me</code>再点击<code>Continue</code>。<br>
如果弹出兴趣爱好界面，也是直接跳过即可。<br>
如果弹出购买界面，直接选择左边免费版就行。<br>
至此，账户创建完毕。</li>
</ul>
<h1 id="创建储存库">创建储存库</h1>
<p>储存库就像盒子，可以把每个作品分开存放。<br>
点击右上角加号，选择第一个。<br>
<img src="https://img.duan.ee/z/2024/03/16/65f521b2f3e2f.png" alt="" loading="lazy"><br>
填写基本内容并创建<img src="https://img.duan.ee/z/2024/03/16/65f5239c6d2c2.png" alt="" loading="lazy"><br>
之后可以点击<a href="github.com">Github主页</a>左侧进入储存库。</p>
<h1 id="创建文件">创建文件</h1>
<h2 id="第一次创建">第一次创建</h2>
<p>首先从<a href="github.com">Github</a>页面左边找到刚刚创建的储存库，并点击。<br>
第一次打开会有两种方式创建文件，直接创建和上传。<br>
<img src="https://img.duan.ee/z/2024/03/16/65f5336723919.png" alt="" loading="lazy"><br>
直接创建新文件时如下图所示。输入文件名和内容，再点击绿色创建按钮就可上传了。<br>
<img src="https://img-blog.csdnimg.cn/20200803083604139.png" alt="" loading="lazy"></p>
<h2 id="上传文件">上传文件</h2>
<p>如图所示，可以点击按钮上传，也可以直接把文件拖动到窗口中，最后点击下面地绿色按钮，等待上传成功。</p>
<h2 id="之后创建">之后创建</h2>
<p>回到储存库界面中，点击加号，有两个选项。<br>
<img src="https://img.duan.ee/z/2024/03/22/65fd51256f0f9.png" alt="" loading="lazy"><br>
之后操作和之前相同。</p>
<h1 id="删除文件">删除文件</h1>
<p>首先在储存库文件列表上点击一个文件。然后点击三个点里的&quot;Delete&quot;删除文件，跳转界面后，点击绿色按钮继续。<br>
<img src="https://img.duan.ee/z/2024/03/22/65fd54b9c78a7.png" alt="" loading="lazy"><br>
<img src="https://img.duan.ee/z/2024/03/22/65fd550c35d94.png" alt="" loading="lazy"></p>
<h1 id="修改文件">修改文件</h1>
<p>在储存库文件列表上点击进入一个文件，然后点击右上角编辑按钮。修改好文件后点击绿色按钮上传即可，此处逻辑和创建文件类似。<br>
<img src="https://img.duan.ee/z/2024/03/22/65fd567707e79.png" alt="" loading="lazy"></p>
<h1 id="问题解答">问题解答</h1>
<ul>
<li>怎么打不开Github &gt; Github再中国打开很慢，多刷新几次试试，还不行就安装<a href="https://steampp.net">WattToolkit</a>进行网络加速。</li>
<li>编辑或修改无法成功 &gt; 因为加载很慢导致加载超时，如果使用了网络加速器请关闭加速器刷新重试，如果没有使用可以开启加速器刷新尝试。</li>
<li>Github注册时收不到验证码 &gt; 不要使用国内的邮箱(特别是QQ邮箱别用)，国内邮箱通常自动屏蔽国外邮件，推荐使用<a href="outlook.com">Outlook</a>邮箱，或者可以去电子邮箱的垃圾桶/回收站里找找(这些情况现在不多了)。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[欢迎]]></title>
        <id>https://gchrweb.github.io/post/about/</id>
        <link href="https://gchrweb.github.io/post/about/">
        </link>
        <updated>2024-03-22T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎来到 GCGR WEB<br>
请记住本站的永久地址 <a href="https://geng-cr.github.io/">geng-cr.github.io</a></p>
</blockquote>
<h2 id="作者-gengchr">👨‍💻 作者 GengCHR</h2>
<h2 id="哔哩哔哩-bilibili-凌空翱翔的垃圾桶">📬 哔哩哔哩 Bilibili - <a href="https://space.bilibili.com/3493271839967884">凌空翱翔的垃圾桶</a></h2>
<h2 id="️-作者邮箱-gengcroutlookcom">✉️ 作者邮箱 - gengcr@outlook.com</h2>
<p>本站使用 GithubPages + Gridea 的方式搭建，并通过国内图床来优化图片加载。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[比赛的意义是什么]]></title>
        <id>https://gchrweb.github.io/post/bi-sai-de-yi-yi-shi-shi-me/</id>
        <link href="https://gchrweb.github.io/post/bi-sai-de-yi-yi-shi-shi-me/">
        </link>
        <updated>2024-03-22T09:13:28.000Z</updated>
        <content type="html"><![CDATA[<p>即兴创做。</p>
<p>比赛存在两种。一种是被迫的比赛，或说那叫考试，但主要是给自己看的，比较的成分并不多。一种是自愿的比赛，或说本来就是为了竞技高下而产生的。在任何比赛中获得的好与坏，都会影响到自己对自己的看法和他人对自己的看法。当别人去邀请你比赛，你通常有两种选择，一种是参加，一种是放弃。而比赛是需要前提的，如果去参加自己并不想去参加的比赛时，也就没有多少意义了。再打个比方，就说你现在是小学六年级，然后你受邀去参加一个小学二年级的数学竞赛，往往也只会破坏比赛平衡。参加比赛往往是一种体现，但如果什么都参加，往往不是很好，要有针对性地选择对自己有益地竞赛，才是一种很好地方案。</p>
<p>突如其来地比赛往往打乱我地作息，没必要在本就毫无所剩地时间里用力挤出碎片时间，如果这样，许多小方面都会有所变化，从而让办好事情更难。</p>
<p>即兴创做，不太通顺，请谅解。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[4 字典与集合]]></title>
        <id>https://gchrweb.github.io/post/4-zi-dian-yu-ji-he/</id>
        <link href="https://gchrweb.github.io/post/4-zi-dian-yu-ji-he/">
        </link>
        <updated>2024-03-10T05:53:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="41-字典是什么">4.1 字典是什么</h1>
<p>字典和列表类似，但又完全不一样。</p>
<p>列表更像是一个个按顺序摆放的盒子，每个盒子有一个序号，盒子里有内容。</p>
<p>字典更像是一个个乱放的盒子，但每个盒子都有独特的姓名。</p>
<p>就像图片里的那样。<img src="https://img.duan.ee/z/2024/03/10/65ed4ac9137af.png" alt="" loading="lazy"></p>
<p>列表的每个序号都有对应的内容，字典的每个名字也有对应得内容。</p>
<p>在字典中，盒子的名字叫做键，盒子的内容叫做值。</p>
<h1 id="42-字典的写法">4.2 字典的写法</h1>
<figure data-type="image" tabindex="1"><img src="https://img.duan.ee/z/2024/03/10/65ed4aaa18c16.png" alt="" loading="lazy"></figure>
<p>字典最外侧是花括号，每个键与值之间用英文分号隔开，每个键值与键值之间，用逗号隔开。</p>
<p>字典的键和值都要以一种变量类型存在，比如字符串、整数等。</p>
<p>假如直接<code>{a1:abcdefg,a2:hijklmn}</code>的话，是不行的，他们都会被当成变量，也就是把变量的内容填入字典当中，如果没有这些变量的话，会直接报错。除非你本来就把要变量的内容填入字典，不然这样不会按照你理想的方向运行。</p>
<p>字典和列表一样可以用方括号得到一个值，只不过字典填的不是序号，而键(名字)。</p>
<p>例子如下</p>
<pre><code class="language-python">a = {&quot;绿田野&quot;:&quot;大聪明&quot;,&quot;李丑&quot;:54188}
 # 创建变量
print(a) # 直接输出整个列表
print(a[&quot;绿田野&quot;]) # 输出字典a键为&quot;绿田野&quot;的值
</code></pre>
<p>运行结果如下</p>
<pre><code class="language-python">{'绿田野': '大聪明', '李丑': 54188}
大聪明
</code></pre>
<p>另外，字典是可以套娃的(就是容易看错)。</p>
<h1 id="43-遍历字典">4.3 遍历字典</h1>
<p>跟列表一样，字典也是可以使用for遍历的，例子如下。</p>
<pre><code class="language-python">a = {&quot;绿田野&quot;:&quot;大聪明&quot;,&quot;李丑&quot;:54188}
 # 创建变量
for i in a: # 遍历字典a
    print(&quot;键&quot;,i) # 输出遍历到的键(名字)
    print(&quot;值&quot;,a[i]) # 输出键对应的值(内容)
</code></pre>
<p>字典直接遍历会返回键而不是值，所以要获得对应的值还要再去字典中获取。运行结果如下。</p>
<pre><code class="language-python">键 绿田野
值 大聪明
键 李丑
值 54188
</code></pre>
<h1 id="44-修改字典的值">4.4 修改字典的值</h1>
<p>和列表一样的修改方法，先指定一个键，在用等号修改值得内容。</p>
<pre><code class="language-python">a = {&quot;绿田野&quot;:&quot;大聪明&quot;,&quot;李丑&quot;:54188}
 # 创建变量
print(a) # 输出原先的字典
a[&quot;绿田野&quot;] = &quot;Big聪明&quot;
print(a) # 输出删除后的键
</code></pre>
<p>结果如下</p>
<pre><code class="language-python">{'绿田野': '大聪明', '李丑': 54188}
{'绿田野': 'Big聪明', '李丑': 54188}
</code></pre>
<h1 id="45-删除字典的一个键">4.5 删除字典的一个键</h1>
<p>使用<code>del</code>可以删除字典中的一个键(值也会连带消失)。</p>
<p>用法<code>del 字典[键]</code></p>
<p>实例如下</p>
<pre><code class="language-python">a = {&quot;绿田野&quot;:&quot;大聪明&quot;,&quot;李丑&quot;:54188}
 # 创建变量
print(a) # 输出原先的字典
del a[&quot;李丑&quot;] # 删除&quot;李丑&quot;
print(a) # 输出删除后的键
</code></pre>
<p>运行结果</p>
<pre><code class="language-python">{'绿田野': '大聪明', '李丑': 54188}
{'绿田野': '大聪明'}
</code></pre>
<h1 id="46-为字典添加键">4.6 为字典添加键</h1>
<p>给字典添加新的内容的方法比列表简单多了，用修改字典的方法就行，会自动创建，直接上实例。</p>
<pre><code class="language-python">a = {&quot;绿田野&quot;:&quot;大聪明&quot;,&quot;李丑&quot;:54188}
 # 创建变量
print(a) # 输出原先的字典
a[&quot;渡易尘&quot;] = &quot;NotClever&quot;
print(a) # 输出删除后的键
</code></pre>
<p>运行结果</p>
<pre><code class="language-python">{'绿田野': '大聪明', '李丑': 54188}
{'绿田野': '大聪明', '李丑': 54188, '渡易尘': 'NotClever'}
</code></pre>
<h1 id="47-集合">4.7 集合</h1>
<p>集合是一种很少有人会用的变量类型，和字典唯一的区别，就是没有键，只有值。</p>
<p>同时也像一堆乱放的没名字也没序号的盒子，很难分清，所以集合也没有多少实际用途。<br>
<img src="https://img.duan.ee/z/2024/03/10/65ed4aa8adac8.png" alt="" loading="lazy"></p>
<p>集合不多介绍，自己试试就行。</p>
<br/>
<blockquote>
<p>有些同学就要问了，上面的窗口怎么是黑色的呢，什么软件，怎么调的？</p>
<p>其实就是Pyhon自带的IDLE</p>
<p>上面白条里点击 Options，然后点第一个 ConfigureIDLE 就进入设置了，可以选择字体了。</p>
<p>上面第二个选项可以选择颜色主题</p>
<img src="https://img.duan.ee/z/2024/03/10/65ed4aab6a6bc.png" style="zoom:20%;" />
<p>右边这个就是调主题的</p>
<img src="https://img.duan.ee/z/2024/03/10/65ed4aa0d02a6.png" style="zoom:35%;" />
<p>调完点下面OK就行</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[3 列表与元组]]></title>
        <id>https://gchrweb.github.io/post/3-lie-biao-yu-yuan-zu/</id>
        <link href="https://gchrweb.github.io/post/3-lie-biao-yu-yuan-zu/">
        </link>
        <updated>2024-03-10T05:50:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="31-print的更多参数">3.1 print的更多参数</h1>
<p>print其实有很多的参数,下面列举常用参数</p>
<p><code>end</code>是修改换行的参数，例如<code>print(&quot;hello&quot;,end=&quot;&quot;)</code>，末尾会变成空白而不是换行。</p>
<p><code>sep</code>是修改逗号间隔的参数，例如<code>print(&quot;a1&quot;,&quot;a2&quot;,sep=&quot;-&quot;)</code>就会输出<code>a1-a2</code>。</p>
<p>print之中输出的量与量之间的逗号可以使用<code>+</code>来代替，输出的空格也会消失，但前提两个必须都是字符串，例如<code>print(&quot;S&quot;+&quot;B&quot;)</code>。</p>
<h1 id="32-列表的认识">3.2 列表的认识</h1>
<p>Python中有一种变量类型叫做列表，列表可以包含多个变量，也可以只包含一个变量。</p>
<p><code>[&quot;我是0号&quot;,&quot;我是1号&quot;,2,3]</code></p>
<p>上面就是一个普通的列表，列表可以包含任意的变量，因为列表本身是一种变量，所以可以套娃。</p>
<p>Python以及许多编程语言都将数列以0为开头。Python列表就是如此，量与量之间使用逗号分隔，第一个是 0 号，第二个是 1 号，第三个就是 2 号。</p>
<h1 id="33-列表的读取">3.3 列表的读取</h1>
<p>以下代码先创建了一个名叫 a 的列表，然后读取第 0 个并输出，又读取第2个并输出。</p>
<pre><code class="language-python">a = [&quot;北师大&quot;,&quot;浙师大&quot;,&quot;缅_北师大&quot;]  # 创建列表a，并设置三个量
b = a[0]     # 将b设为a的第0项
print(b)     # 输出变量b
print(a[2])  # 直接输出a的第2项
</code></pre>
<p>运行结果</p>
<pre><code class="language-python">北师大
缅_北师大
</code></pre>
<p>代码中就可以看出来，可以使用<code>列表[位数]</code>来获取列表中的一个量。</p>
<h1 id="34-列表的修改">3.4 列表的修改</h1>
<p>可以使用<code>列表[位数]</code>来获取列表中的一个量，也可以用这种方式修改列表的一个量。</p>
<pre><code class="language-python">a = [&quot;北师大&quot;,&quot;浙师大&quot;,&quot;缅_北师大&quot;]   # 创建列表a，并设置三个量
print(a)                 # 输出列表a
a[2] = &quot;大聪明师范学校&quot;  # 修改第2项的值
print(a)                 # 再次输出列表a
</code></pre>
<p>运行结果:</p>
<pre><code class="language-python">['北师大', '浙师大', '缅_北师大']
['北师大', '浙师大', '大聪明师范学校']
</code></pre>
<p>可以看到，第2项被修改了</p>
<h1 id="35-读取列表和字符串的片段">3.5 读取列表和字符串的片段</h1>
<p>如果只想要列表或字符串的一部分，可以用方括号<code>[:]</code>，在中间写上要获取的片段。</p>
<pre><code class="language-python">a = &quot;0123456789&quot;    # 创建一个字符串
print(a[2:5])       # 截取字符串从2开始到5之前的值
print(a[2:])        # 截取字符串从2开始到结尾的值
print(a[:-2])       # 截取字符串从开头到倒数第2个的值(没有倒数0)
b = [&quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;]  # 创建一个列表
print(b[2:5])       # 截取列表从2开始到5之前的值
print(b[2:])        # 截取列表从2开始到末尾的值
print(b[:-2])       # 截取列表从开头到倒数第2个的值(没有倒数0)
</code></pre>
<p>运行结果:</p>
<pre><code class="language-python">234
23456789
01234567
['2', '3', '4']
['2', '3', '4', '5', '6', '7', '8', '9']
['0', '1', '2', '3', '4', '5', '6', '7']
</code></pre>
<p>说简单点，方括号中间，冒号的作用是，从几到几之前</p>
<h1 id="36-往列表添加内容">3.6 往列表添加内容</h1>
<p>我们可以使用append()方法来向列表末尾添加内容，方法实例如下。</p>
<pre><code class="language-python">a = ['谷歌','百度','必应'] # 创建列表a
print(a)                   # 输出列表a
a.append('搜狗')           # 添加内容&quot;搜狗&quot;
print(a)                   # 再次输出列表a
</code></pre>
<p>运行结果:</p>
<pre><code class="language-python">['谷歌', '百度', '必应']
['谷歌', '百度', '必应', '搜狗']
</code></pre>
<h1 id="37-从列表中删除内容">3.7 从列表中删除内容</h1>
<p>我们可以从列表中删除内容，并让后面的内容自动往前靠，只需要用到del，翻译为删除。</p>
<pre><code class="language-python">a = ['谷歌','百度','必应','搜狗'] # 创建列表a
print(a)    # 输出列表a
del a[2]    # 删除位于第2的内容
print(a)    # 再次输出列表a
</code></pre>
<p>运行结果:</p>
<pre><code class="language-python">['谷歌', '百度', '必应', '搜狗']
['谷歌', '百度', '搜狗']
</code></pre>
<h1 id="38-遍历列表内容">3.8 遍历列表内容</h1>
<p>假如我们要对列表每个内容分开操作，可以使用for循环。</p>
<p>而<code>len(列表或字符串)</code>这个函数可以得到列表的项数或字符串的字符数。</p>
<p>比如要将每个内容分开输出，我们可以写出以下程序(不推荐):</p>
<pre><code class="language-python"># &lt;代码自行消化理解-不推荐使用这种方法&gt;

a = ['谷歌','百度','必应','搜狗']
for i in range(len(a)):
  print(a[i])
</code></pre>
<p>当然也可以使用for的遍历方法(非常推荐):</p>
<pre><code class="language-python">a = ['谷歌','百度','必应','搜狗']
for i in a:  # 变量i是循环中列表当前循环到的变量值
  print(i)   # 输出变量i
</code></pre>
<p>两种运行结果一致:</p>
<pre><code class="language-python">谷歌
百度
必应
搜狗
</code></pre>
<h1 id="39-元组">3.9 元组</h1>
<p>元组是一种和列表及其相似的类型，和列表唯一的区别就是，元组创建后就不能够修改，只能读取内容。元组使用普通括号写成。要修改元组，只能整个元组一起修改。</p>
<pre><code class="language-python">a = ('a',&quot;b&quot;,'c')
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2 判断与循环]]></title>
        <id>https://gchrweb.github.io/post/2-pan-duan-yu-xun-huan/</id>
        <link href="https://gchrweb.github.io/post/2-pan-duan-yu-xun-huan/">
        </link>
        <updated>2024-03-10T05:46:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="21-缩进">2.1 缩进</h1>
<p>缩进是Python中一种重要的形式，用来区分层次，通常以四个空格的形式存在，但只要同级别的缩进空格一致就不会出问题。</p>
<p>提示：尽量不要使用Tab键进行缩进，一些版本上会出现错误，还可能和四个空格区分不出而出现错误(部分编辑软件会自动转换Tab为空格)。</p>
<pre><code class="language-python">key = input(&quot;请输入密码：&quot;)
if key == &quot;666789&quot;:
    print(&quot;密码正确&quot;)
    print(&quot;欢迎使用&quot;)
else:
  print(&quot;密码错误&quot;)
</code></pre>
<p>如上面这段代码，是一个使用if判断语句的代码，几个print()前面都有空格，这就是缩进，一个层次统一比上一层多N个空格。一层缩进由上一行代码末尾的冒号开始。</p>
<br/>
<figure data-type="image" tabindex="1"><img src="https://img.duan.ee/z/2024/03/10/65ed49850d92f.png" alt="" loading="lazy"></figure>
<h1 id="22-if-判断语句">2.2 if 判断语句</h1>
<p>说到判断，就需要认识一种Python中的量的类型——布偶型Bool</p>
<p>True 真          False 假         ( 注意要大写 )</p>
<pre><code class="language-python">if True或False:       #必须
    如果True就要执行这里
elif True或False:     #选择性
    如果第一次False第二次True就执行这里
elif True或False:     #选择性
    如果前面都False这次True就执行这里
#...    选择性
else:                 #选择性
    如果都False就执行这里
</code></pre>
<p>上面是一个if语句大纲，if、elif、else这些层次平齐，执行的代码都要缩进。</p>
<h3 id="判断符">判断符</h3>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>符号</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>==</td>
<td>等于 =</td>
<td>&gt;</td>
<td>大于 &gt;</td>
</tr>
<tr>
<td>!=</td>
<td>不等于 ≠</td>
<td>&lt;</td>
<td>小于 &lt;</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于 ≥</td>
<td>&lt;=</td>
<td>小于等于 ≤</td>
</tr>
</tbody>
</table>
<p>在交互式窗口里试试</p>
<pre><code class="language-python">&gt;&gt;&gt; 4 + 9 == 13
True
&gt;&gt;&gt; 8 + 8 &gt; 23
False
...
</code></pre>
<p>也可以写进程序，放进if语句。</p>
<pre><code class="language-python">a = 8
b = &quot;8&quot;
if a == b:
  print(&quot;一样&quot;)
else:
  print(&quot;不一样&quot;)
</code></pre>
<p>结果当然是不一样，因为a是数字(整数类型)，而b是字符串。</p>
<p>用if做一个分数等级判断器，看看考了优良还是合格。</p>
<p>100 满分    90 优秀    80 良好    60 合格    1 不合格    0 没分数</p>
<pre><code class="language-python">a = int( input(&quot;请输入分数:&quot;) )   # int() 可以把其他类型转换成整数类型，因为字符串不能进行比较
if a &gt; 100 or a &lt; 0:             # 先挑出错误的分数
  print(&quot;请检查是否输入正确的分数&quot;)
elif a == 100:
  print(&quot;满分&quot;)
elif a &gt;= 90:
  print(&quot;优秀&quot;)
elif a &gt;= 80:
  print(&quot;良好&quot;)
elif a &gt;= 60:
  print(&quot;合格&quot;)
elif a &gt;= 1:
  print(&quot;不合格&quot;)
elif a == 0:
  print(&quot;没分数&quot;)
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img.duan.ee/z/2024/03/10/65ed49852865e.png" alt="" loading="lazy"></figure>
<h1 id="23-or-and-not">2.3 or , and , not</h1>
<p>or 是或，只要两边有一边是真的，就会变成真。</p>
<pre><code class="language-python">&gt;&gt;&gt; 1 == 4 or &quot;6&quot; == &quot;6&quot;
True
&gt;&gt;&gt; True or False
True
&gt;&gt;&gt; True or True
True
</code></pre>
<p>and 是与，只要两边都是真的，就会变成真的。</p>
<pre><code class="language-python">&gt;&gt;&gt; False and True
False
&gt;&gt;&gt; False and False
False
&gt;&gt; True and True
True

</code></pre>
<p>not 是否，它可以把一个值反过来。</p>
<pre><code class="language-python">&gt;&gt;&gt; not False
True
&gt;&gt;&gt; not True
False
</code></pre>
<h1 id="24-for-循环语句">2.4 for 循环语句</h1>
<p>假如有一个程序，要求输出一千遍遍同样的文字，那这么多个print()要打到什么时候，用复制粘贴也可能打多打少*<mark>(看行数Doge)</mark>*，这时候，就要用到循环。</p>
<p>如果你知道你要循环几遍，就可以用 for 循环语句，更加方便。</p>
<pre><code>for i in range(1000):
    print(&quot;Don't copy&quot;)
</code></pre>
<p>运行结果，看不清别怪我：<img src="https://img.duan.ee/z/2024/03/10/65ed4985a1ae0.png" alt="" loading="lazy"></p>
<p>在 range() 里，填上要循环的次数，for和in之间的变量i就是目前循环了几次的变量(可以改成其他名称)，i 会从 0 到 1000之前(999)。</p>
<p>如果range()里写的在详细一些，也一样。</p>
<pre><code class="language-python">range(20)       #         到20之前
range(0,20)     # 从0     到20之前
range(0,1,20)   # 从0间隔1到20之前 
</code></pre>
<p>变量 i 同样可以修改为其他变量，如a\b\c\d...。</p>
<p>for循环可以一层套一层。</p>
<h1 id="25-while-循环语句">2.5 while 循环语句</h1>
<p>while 也是一种循环语句，与for不同的是，它更适合不知道要循环几次的地方。</p>
<pre><code class="language-python">while i &lt; 8:
  print(&quot;hello&quot;)
  i += 1    # i += 1 同等与 i = i + 1
</code></pre>
<p>while的工作原理是：如果后面的值为真，开始循环，每循环完一次，又会去判断，如果为真，就继续下一轮循环，如果为假，就退出循环。</p>
<p>while循环可以一层套一层。</p>
<h1 id="26-break-语句">2.6 break 语句</h1>
<p>在循环中，经常能看到break语句，它的作用就是跳出循环。无论在什么地方，break都能跳出一层循环，这个循环可能是for，也可能是while。</p>
<pre><code class="language-python">for i in range(10):
  print(i)
  if i == 7:
    break
</code></pre>
<p>上面这些代码，执行结果如下。for循环从0开始，到7的时候，被break跳出了循环。</p>
<pre><code class="language-python">0
1
2
3
4
5
6
7
</code></pre>
<h1 id="27-continue-语句">2.7 continue 语句</h1>
<p>continue 语句也出现在循环当中，它的作用就是跳过本次循环。当循环遇到continue的时候，for循环会直接进行下一次，如果已经是最后一次，就会正常跳出循环，而while遇到continue时，会跳过循环后面的语句，再次判断，真就新一次循环，假就跳出循环。</p>
<pre><code class="language-python">for i in &quot;Pyxxthxxon&quot;:  # 让i遍历&quot;Pyxxthxxon&quot;的每一个字符
    if i == &quot;x&quot;:        #检测&quot;x&quot;
        continue        #如果是&quot;x&quot;就跳过
    print(i,end=&quot;&quot;)     #输出i，end=&quot;&quot;是将print()输出末尾不换行。
</code></pre>
<p>这一段代码会输出Python，因为跳过了x。</p>
<h1 id="28-forelse-和-whileelse-语句">2.8 for...else 和 while...else 语句</h1>
<p>如果一个for循环或while循环不是通过break跳出的，也就是正常执行完的，就会执行后面的else语句。</p>
<pre><code class="language-python">for i in range(6):
  if i == 3:
    break
else:
  print(&quot;我不会被执行，因为这个for循环到3的时候用break跳出来了&quot;)

print(&quot;-------------&quot;)

i = 0
while i &lt; 6:
  i += 1
else:
  print(&quot;我会被执行，因为这个while循环没有被break跳出&quot;)
</code></pre>
<p>执行结果</p>
<pre><code class="language-python">-------------
我会被执行，因为这个while循环没有被break跳出
</code></pre>
<h1 id="29-pass-空语句">2.9 pass 空语句</h1>
<p>pass是一个空语句，它什么都不干，就是占位用的，可以保证程序的结构完整性。</p>
<pre><code class="language-python">a = 666
if a != 666:
  pass         #这行是空语句，占位用的
else:
  print(&quot;Yes&quot;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1 Python启蒙]]></title>
        <id>https://gchrweb.github.io/post/1-python-qi-meng/</id>
        <link href="https://gchrweb.github.io/post/1-python-qi-meng/">
        </link>
        <updated>2024-03-10T05:37:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="11-python是什么">1.1 Python是什么</h1>
<p>Python是一个编程语言，因为简单易学和强大的功能而被广泛使用，处处都有它的踪影。</p>
<p>Python现在常用的版本有2.x和3.x，不过Python现在广泛推广3.x，一些2.x的代码需要修改才能在3.x运行，这个教程会学习Python3的内容。</p>
<h1 id="12-安装python">1.2 安装Python</h1>
<p>作者懒得写安装过程了，自行上网搜索，附上<a href="https://www.python.org">Python 官网</a>。</p>
<p>例如在官网找安装程序进行安装。<img src="https://img.duan.ee/z/2024/03/10/65ed4796ea7a6.png" alt="" loading="lazy"></p>
<p>如果不想安装 Python 的话，可以在网上找一些 Python在线编程 的网站，不过会有很多的功能限制。</p>
<h1 id="13-使用idle编写程序">1.3 使用IDLE编写程序</h1>
<p>在开始菜单里找到 IDLE (Python 3.x) 打开，这是Python自带的代码编辑器，打开的第一个窗口是交互式窗口，在提示符&quot;&gt;&gt;&gt;&quot;后输入代码按回车，可以直接看到结果。点击菜单栏里的 File --&gt; New File 或按键盘 Ctrl + N 打开代码编辑窗口，可以在这里输入代码编写程序。写好程序后，点击 File --&gt; Save 或按键盘 Ctrl + S 保存文件。在菜单中点击 Run --&gt; Run Module 或按下键盘 F5 运行程序。点击 File --&gt; Open 或按 Ctrl + O 就可以打开文件。</p>
<p><img src="https://img.duan.ee/z/2024/03/10/65ed4794c8778.png" alt="" loading="lazy"><img src="https://img.duan.ee/z/2024/03/10/65ed4795ec290.png" alt="" loading="lazy"></p>
<h1 id="14-输出-hello-world">1.4 输出 Hello World</h1>
<p>令人心动的时刻来了，显示一个 Helo World ！！！</p>
<p>Hello World 你好世界 (这是所有编程的风俗特点)</p>
<p>在Python中，打印函数<code>print()</code>可以在屏幕上输出文字。</p>
<pre><code class="language-python">print(&quot;Hello World&quot;) 
</code></pre>
<p>在这段代码中<code>print()</code>是一个输出用的函数。被它用括号抱起来的<code>&quot;Hello World&quot;</code>是一个字符串，字符串就是一串文字，用两个<code>&quot;</code>把它们穿起来就行。</p>
<p>Python中，一行就是一个步骤，Python会从上到下运行你的一个个步骤。</p>
<h1 id="15-注释">1.5 注释</h1>
<p>注释是一段提示，可以用注释告诉别人你的代码是干什么用的。Python解释器(运行Python代码的软件)不会识别你的注释。</p>
<h3 id="单行注释">单行注释</h3>
<p>在一行代码的末尾加上&quot;#&quot;(井号)，这行&quot;#&quot;后面的内容就都是注释。</p>
<pre><code class="language-python">print(&quot;Hello World&quot;)     #显示 Hello World
#我是单行注释
</code></pre>
<h3 id="多行注释">多行注释</h3>
<p>用三个单引号或双引号为一边括起来的，是多行注释。</p>
<pre><code class="language-python">&quot;&quot;&quot;
我是多行注释
人生苦短 我选Python
Hello World
&quot;&quot;&quot;
print(&quot;Hello World&quot;)
&quot;&quot;&quot;多行注释也可以在一行内&quot;&quot;&quot;
</code></pre>
<h1 id="16-变量">1.6 变量</h1>
<p>变量，一个会变化的量，是程序中一个重要的东西，它可以储存数据。在Python中，一个变量可以直接赋值使用。</p>
<pre><code class="language-python">apples = 5   #把变量apples赋值数字5，代表苹果有5个
</code></pre>
<p>变量要清晰明了，最好能让别人明白这个变量的用途。</p>
<p>变量只能是英文字母、数字、下划线&quot;_&quot;组成，只能以英文字母开头，变量名不能是一个函数，大小写不同就是两个变量。</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>是否合法</th>
<th>变量名</th>
<th>是否合法</th>
</tr>
</thead>
<tbody>
<tr>
<td>a4</td>
<td>合法</td>
<td>1j=-+3</td>
<td>不合法 不能有符合</td>
</tr>
<tr>
<td>f</td>
<td>合法</td>
<td>8u</td>
<td>不合法 不能数字开头</td>
</tr>
<tr>
<td>d56d</td>
<td>合法</td>
<td>print</td>
<td>不合法 print是函数/关键词</td>
</tr>
</tbody>
</table>
<pre><code class="language-python">apples = 5                      #苹果有5个
print(&quot;苹果有&quot;,apples,&quot;个&quot;)     #输出苹果的数量，在print()中，可以用英文逗号分开几个量。
</code></pre>
<p>运行结果如下</p>
<pre><code class="language-python">苹果有 5 个
</code></pre>
<h1 id="17-输入函数input">1.7 输入函数input()</h1>
<p>一个程序，只有输出，没有输入，那么它能做的事情就很少。在Python中，input()函数能实现输入。</p>
<pre><code class="language-python">name = input(&quot;请输入您的姓名：&quot;)     #input()询问用户名称，在把字符串回答传给变量name
print(name,&quot;很高兴认识你&quot;)           #print()先说出用户的名称，再问好
</code></pre>
<p>运行结果如下</p>
<pre><code class="language-python">请输入您的姓名：GengCR
GengCR 很高兴认识你
</code></pre>
<p>在运行之后，程序询问姓名，回答<code>GengCR</code>并按<code>Enter回车</code>后程序就来问好了。</p>
<h1 id="18-运算符">1.8 运算符</h1>
<p>在Python中，也有加减乘除。打开交互式窗口试试吧。</p>
<ul>
<li>加法  +</li>
<li>减法 -</li>
<li>乘法 *</li>
<li>除法 /</li>
<li>求余数 %</li>
<li>次方 **</li>
<li>取整除法 //</li>
</ul>
<pre><code class="language-python">&gt;&gt;&gt; 1 + 1
2
&gt;&gt;&gt; 8 - 5
3
&gt;&gt;&gt; 4 * 7
28
&gt;&gt;&gt; 42 / 7
6.0
&gt;&gt;&gt;  18 % 4
2
&gt;&gt;&gt; 5 ** 3
125
&gt;&gt;&gt;  18 // 4
4
</code></pre>
<p>当然，我们也可以把他写成一个程序。</p>
<pre><code class="language-python">a = 35
b = 7
print(&quot;35 + 7 =&quot; , a + b)
print(&quot;35 - 7 =&quot; , a - b)
# 就写两个例子，其他自己写！
</code></pre>
<p>运行结果如下</p>
<pre><code class="language-python">35 + 7 = 42
35 - 7 = 28
</code></pre>
]]></content>
    </entry>
</feed>